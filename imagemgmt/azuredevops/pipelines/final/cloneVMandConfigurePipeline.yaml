# this pipeline does the following:
# - create a new VM using the disk snapshot of the original VM
# - run WindowsUpdate and application maintenance on the VM
# - sysprep the VM and set it to generalized
# - create a new image version from the VM in the Azure Compute Gallery
#
# Author : Mitush Yadav
# https://github.com/MitushYadav

trigger: none

pool:
  # or use a self hosted pool
  vmImage: 'windows-latest'

variables:
  # add the following 2 variables as pipeline editor variables, for security
  #armConnection: ''
  #subscriptionId: ''
  # specify the resource group name containing the source VM
  sourceRgName: ''
  # specify the name of the source VM
  sourceVmName: ''
  # specify the resource group to deploy the clone VM to. Will be created if not present
  destinationRgName: ''
  # specify the name of the clone VM
  destinationVmName: ''
  # specify the name of the vNet to which the clone VM will be attached
  destinationVnetName: ''
  # specify the name of the subnet to which the clone VM will be attached
  destinationSubnetName: ''
  # specify the resource group name of the existing Azure Compute Gallery
  galleryRgName: ''
  # specify the name of the existing Azure Compute Gallery
  galleryName: ''
  # specify the name of the existing Azure Compute Gallery definition
  galleryDefinitionName: ''
  # specify the image version to give to the new image in ACG
  galleryImageVersion: ''
  # specify the location of the resources to be deployed, generally the resource group location
  location: ''


steps:
# Power off the VM, if not already powered off
- task: AzurePowerShell@5
  inputs:
    azureSubscription: $(armConnection)
    ScriptType: 'InlineScript'
    Inline: |
      Stop-AzVM -ResourceGroupName "$(sourceRgName)" -Name "$(sourceVmName)" -Force
    FailOnStandardError: true
    azurePowerShellVersion: 'LatestVersion'

# Create destination resource group, if required
- task: AzurePowerShell@5
  inputs:
    azureSubscription: $(armConnection)
    ScriptType: 'InlineScript'
    Inline: |
      if($null -eq $(Get-AzResourceGroup -Name "$(destinationRgName)" -Location "$(location)" -ErrorAction SilentlyContinue)) {
        New-AzResourceGroup -Name "$(destinationRgName)" -Location "$(location)"
      }
    FailOnStandardError: true
    azurePowerShellVersion: 'LatestVersion'

# Create a clone of the VM in the destination resource group. Uses a powershell script from the repo.
- task: AzurePowerShell@5
  inputs:
    azureSubscription: $(armConnection)
    ScriptType: 'FilePath'
    ScriptPath: $(Build.Repository.LocalPath)\CreateNewVMFromExistingVM.ps1
    ScriptArguments:
      -SourceResourceGroupName $(sourceRgName) `
      -SourceVMName $(sourceVmName) `
      -DestinationResourceGroupName $(destinationRgName) `
      -DestinationVMName $(destinationVmName) `
      -DestinationVNetworkName $(destinationVnetName) `
      -DestinationSubnetName $(destinationSubnetName)
    FailOnStandardError: true
    azurePowerShellVersion: 'LatestVersion'

# add any required steps. for example, to cleanup local accounts, etc

# Reboot the VM, if required
- task: AzurePowerShell@5
  inputs:
    azureSubscription: $(armConnection)
    ScriptType: 'InlineScript'
    Inline: |
      Restart-AzVM -ResourceGroupName $(destinationRgName) -Name $(destinationVmName)
    FailOnStandardError: true
    azurePowerShellVersion: 'LatestVersion'

# sysprep Windows
- task: AzurePowerShell@5
  inputs:
    azureSubscription: $(armConnection)
    ScriptType: 'InlineScript'
    Inline: |
      $localScriptPath = "$(Build.Repository.LocalPath)\RunSysprep.ps1"
      Invoke-AzVMRunCommand -ResourceGroupName $(destinationRgName) -Name $(destinationVmName) -CommandId 'RunPowerShellScript' -ScriptPath $localScriptPath
    FailOnStandardError: true
    azurePowerShellVersion: 'LatestVersion'

# set VM as Generalized and deallocate the VM
- task: AzurePowerShell@5
  inputs:
    azureSubscription: $(armConnection)
    ScriptType: 'InlineScript'
    Inline: |
      Set-AzVm -ResourceGroupName $(destinationRgName) -Name $(destinationVmName) -Generalized
      Stop-AzVM -ResourceGroupName $(destinationRgName) -Name $(destinationVmName) -Force
    FailOnStandardError: true
    azurePowerShellVersion: 'LatestVersion'

# create new image version in ACG(already present)
- task: AzurePowerShell@5
  inputs:
    azureSubscription: $(armConnection)
    ScriptType: 'InlineScript'
    Inline: |
      $vmId = (Get-AzVM -ResourceGroupName "$(destinationRgName)" -Name "$(destinationVmName)").Id
      New-AzGalleryImageVersion -GalleryName "$(galleryName)" -GalleryImageDefinitionName "$(galleryDefinitionName)" -GalleryImageVersionName "$(galleryImageVersion)" -ResourceGroupName "$(galleryRgName)" -Location "$(location)" -SourceImageVMId $vmId
    FailOnStandardError: true
    azurePowerShellVersion: 'LatestVersion'

